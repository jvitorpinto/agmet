require(tidyverse)

soil <- read.table("soil_weight.txt", header = TRUE)
cylinder <- read.table("cylinder.txt", header = TRUE)
layer <- read.table("layer.txt", header = TRUE)

test <- merge(soil, cylinder) %>%
  mutate(
    tension,
    layer,
    rep,
    w_wet = (weight - weight_cyl - weight_res) / 1000, # massa do solo ?mido [kg]
    w_dry = (weight_dry - weight_cyl - weight_res) / 1000, # massa do solo seco [kg]
    w_water = w_wet - w_dry, # massa de ?gua [kg]
    v_tot = (pi / 4) * (diameter * diameter * height) / 1e6, # volume aparente do solo [m^3]
    den = w_dry / v_tot, # densidade aparente do solo seco kg / m^3
    theta = w_water / (v_tot * 1000) # umidade do solo com base em volume m^3 / m^3
  )

test$flag = 0
test[test$layer == 6 & test$rep == 2 & test$tension == 2,]$flag = 1
test[test$layer == 7 & test$rep == 3 & test$tension == 0,]$flag = 1

ggplot(test %>% filter(flag == 0), aes(x = tension + 1, y = theta, col = as.factor(rep), group = rep)) +
  geom_line() + geom_point() +
  scale_x_log10() +
  #coord_flip() +
  facet_wrap(~ layer, nrow = 5) +
  theme_bw()

van_genuchten <- function(h, alpha, n, theta_s, theta_r){
  m = 1 - 1 / n
  theta_r + (theta_s - theta_r) / (1 + (alpha * h) ** n) ** m
}

# tens?o convertida em cm de coluna de ?gua
# P = d * g * h => h = P / (d * g)
test$h = 100 * test$tension / 9.80665

nls(
  formula = theta ~ van_genuchten(h, alpha, n, theta_s, theta_r),
  data = test[test$layer == 2 & test$rep == 1,],
  start = list(theta_r = 0.2, theta_s = 0.4, n = 1.8, alpha = 0.02))


#3, 24
ggplot(data.frame(h = 10**seq(1, 4, by = 0.01)), aes(x = h)) +
  geom_point(data = split(fit_data, f = paste0("L", fit_data$layer, "T", fit_data$rep))[[24]] %>% filter(h > 0), mapping = aes(x = h, y = theta)) +
  geom_function(fun = function(x){van_genuchten(x, 0.012, 1.8, 0.38, 0.22)}) +
  scale_x_log10() +
  theme_bw()


fit_data <- test %>% select(layer, rep, h, theta) %>% na.omit()

temp <- split(fit_data, f = paste0("L", fit_data$layer, "T", fit_data$rep)) %>% lapply(function(x){
  trials = list(
    list(theta_r = 0.2, theta_s = 0.4, n = 1.8, alpha = 0.02),
    list(theta_r = 0.22, theta_s = 0.38, n = 1.8, alpha = 0.012)
  )
  for (i in trials){
    ret = try({
      nls(
        formula = theta ~ van_genuchten(h, alpha, n, theta_s, theta_r),
        data = x,
        start = i,
        #lower = list(theta_r = 0, theta_s = 0, n = 1, alpha = 0,001),
        control = nls.control(maxiter = 1000)
      )
    }, silent = TRUE)
    if (typeof(ret) != "character"){
      break
    }
  }
  return(ret)
})


cf <- lapply(temp[!sapply(temp, function(x){is.null(x) | is.character(x)})], function(x){
  as.data.frame(as.list(coef(x)))
}) %>% bind_rows()
cf$id = names(temp[!sapply(temp, function(x){is.null(x) | is.character(x)})])

lapply(temp[!sapply(temp, function(x){is.null(x) | is.character(x)})], function(x){
  summary(x)
})

lapply(temp[!sapply(temp, function(x){is.null(x) | is.character(x)})], function(x){
  data.frame(h = 10 ** seq(0, 4, by = 0.1)) %>% mutate(theta = predict(x, newdata = data.frame(h = h)))
})
fun_plot <- lapply(names(temp[!sapply(temp, function(x){is.null(x) | is.character(x)})]), function(x){
  m = temp[!sapply(temp, function(x){is.null(x) | is.character(x)})][[x]]
  data.frame(id = x, h = 10 ** seq(0, 4, by = 0.1)) %>% mutate(theta = predict(m, newdata = data.frame(h = h)))
}) %>% bind_rows()

ggplot(test %>% mutate(id = paste0("L", layer, "T", rep)) %>% select(id, h, theta) %>% na.omit(), aes(x = h, y = theta)) +
  geom_point() +
  geom_line(data = fun_plot) +
  scale_x_log10() +
  facet_wrap(~id, nrow = 4) +
  theme_bw()
