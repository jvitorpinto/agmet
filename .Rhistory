library(agmet)
library(agmet)
remove.packages("agmet", lib="~/R/win-library/4.0")
library(agmet)
devtools::document()
warnings()
library(agmet)
devtools::document()
library(agmet)
devtools::document()
library(agmet)
fao_et0(25, 0.4, 0.1, 0.665e-3*100, 1.5, 3, 2.3, hourly = TRUE)
fao_et0(25, 0.4, 0.1, 0.665e-3*100, 1.5, 3, 2.3, hourly = TRUE, day = TRUE)
fao_et0(25, 0.4, 0.1, 0.665e-3*100, 1.5, 3, 2.3, hourly = TRUE, day = FALSE)
devtools::document()
devtools::document()
library(agmet)
warnings()
tetens_equation(seq(5, 30, by = 5))
devtools::document()
library(agmet)
devtools::document()
library(agmet)
library(agmet)
library(agmet)
cd ~/Rlibs/descopl/help
hour_angle(lubridate::now(), -48)
hour_angle(lubridate::now(), -48, j = 180)
hour_angle(lubridate::hour(lubridate::now()), -48, lubridate::yday(lubridate::now()))
hour_angle(lubridate::hour(lubridate::now()), -48, lubridate::yday(lubridate::now()))
lubridate::now()
class(lubridate::now())
conn <- DBI::dbConnect(RMySQL::MySQL(),
host = 'localhost', dbname = 'inmet',
user = 'root', password = 'admin')
wd <- DBI::dbGetQuery(conn, 'SELECT * FROM aws_record WHERE inmet_id="A248";')
ws <- DBI::dbGetQuery(conn, 'SELECT * FROM ws;')
DBI::dbDisconnect(conn)
rm(conn)
require(tidyverse)
require(lubridate)
wd <- merge(
ws %>% select(inmet_id, latitude, longitude, altitude),
wd %>% mutate(date_time = as.POSIXct(date_time, tz = 'GMT'))
)
res <- wd %>%
mutate(
rs = solar_radiation / 1000,
patm = atmp / 10,
u2 = wind_speed * 0.75,
es = agmet::tetens_equation(temp),
ea = agmet::tetens_equation(dewpoint),
ra = agmet::ext_rad(date_time - hours(1), date_time, latitude, longitude)
) %>%
mutate(
rs = ifelse(ra < 0.05 & is.na(rs), 0, rs),
rns = agmet::net_shortwave(rs),
rnl = agmet::net_longwave(temp_max, temp_min, ea, rs, 0.75 * ra, hourly = TRUE),
rn = rns + rnl,
et0 = agmet::fao_et0(
temp = temp,
rn = rn,
g = ifelse(ra > 0, 0.1 * rn, 0.5 * rn),
gamma = 0.665e-3 * patm,
u2 = u2,
es = es,
e = ea,
hourly = TRUE,
mode = 'ASCE-ETR',
day = ra > 0
)
)
ggplot(res, aes(x = date_time, y = et0)) + geom_point()
month_name <- c('Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro')
month_abb <- substr(month_name, 1, 3)
ggplot(
res %>%
mutate(local_time = with_tz(date_time, tzone = "Etc/GMT+3")) %>%
filter(year(local_time) >= 2020, month(local_time) %in% c(8, 9, 10)),
aes(x = hour(local_time), y = et0)) +
stat_summary(geom = 'ribbon', fun.max = function(x) quantile(x, 0.75), fun.min = function(x) quantile(x, 0.25), alpha = 0.1) +
stat_summary(geom = 'line', fun = mean) +
#facet_wrap(~ (floor((month(with_tz(date_time, tzone = 'Etc/GMT+3')) - 1) / 3) + 1)) +
facet_wrap(~ factor(month_abb[month(with_tz(date_time, tzone = 'Etc/GMT+3'))], levels = month_abb)) +
xlab('hora local') + ylab('ETr (mm/h)') +
scale_x_continuous(breaks = c(0, 6, 12, 18, 24), minor_breaks = 1:23) +
theme_bw()
ggsave('etr_hour.png', device = 'png', width = 16, height = 6, units = 'cm')
et0h <- res %>%
mutate(local_time = with_tz(date_time, tzone = 'Etc/GMT+3')) %>%
filter(year(date_time) >= 2020) %>%
group_by(month = month(local_time), hour = hour(local_time)) %>%
summarise(
etr = mean(et0, na.rm = TRUE)
)
et0d <- et0h %>% group_by(month) %>% summarise(etr_total = sum(etr), count = length(etr))
et0f <- merge(et0h, et0d) %>% mutate(etf = etr / etr_total)
et0f
et0h
res
library(agmet)
View(res)
View(et0f)
View(et0h)
View(et0f)
soil_weight <- read.table("clipboard", header = TRUE, sep = "\t", dec = ",")
View(soil_weight)
layer_depth <- read.table("clipboard", header = TRUE, sep = "\t", dec = ",")
View(layer_depth)
cylinder <- read.table("clipboard", header = TRUE, sep = "\t", dec = ",")
View(cylinder)
cylinder <- read.table("clipboard", header = TRUE, sep = "\t", dec = ",")
View(cylinder)
View(soil_weight)
View(layer_depth)
View(cylinder)
View(layer_depth)
View(soil_weight)
View(cylinder)
setwd("C:/Users/jvito/Desktop/curva")
View(soil_weight)
View(layer_depth)
View(cylinder)
write.table(soil_weight, file = "soil_weight.txt", row.names = FALSE, col.names = TRUE)
write.table(soil_weight, file = "soil_weight.txt", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(layer, file = "layer.txt", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(cylinder, file = "cylinder.txt", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(layer_depth, file = "layer.txt", row.names = FALSE, col.names = TRUE, quote = FALSE)
write.table(cylinder, file = "cylinder.txt", row.names = FALSE, col.names = TRUE, quote = FALSE)
#' @description Calcula a declinação solar. Declinação solar (δ) é o ângulo
#' formado entre o Sol e o plano do equador terrestre.
#' @usage solar_declination(j)
#' @param j dia do ano (1 a 365 ou 366), objeto Date ou POSIXt
#' @details Ao longo do ano, a
#' declinação solar varia de -23.44° a 23.44° (em radianos: -0.4091052 rad a
#' +0.4091052 rad), com valores negativos ocorrendo no verão do hemisfério sul e
#' valores positivos no verão do hemisfério norte. A declinação solar é igual a
#' 0 durante os equinócios.
#' @export
solar_declination <- function(j) {
UseMethod("solar_declination", j)
}
source('~/GitHub/agmet/R/formulae.R', encoding = 'UTF-8', echo=TRUE)
ext_rad(lubridate::now() - hours(1), lubridate::now(), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48, 1)
devtools::document()
library(agmet)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48, 1)
devtools::document()
library(agmet)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48, 1)
library(agmet)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48, 1)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48)
#' @export
hour_angle.default <- function(dt, lon, j) {
sc <- equation_of_time(j)
ret <- (dt + lon / 15 + sc - 12) * pi / 12
return(ret)
}
hour_angle.default(10, -48, 200)
hour_angle.default(11, -48, 200)
hour_angle.default(12, -48, 200)
hour_angle.default(13, -48, 200)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(agmet)
ext_rad(lubridate::now() - lubridate::hours(1), lubridate::now(), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1) + lubridate::hours(4), lubridate::now() + lubridate::hours(4), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1) + lubridate::hours(5), lubridate::now() + lubridate::hours(5), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1) + lubridate::hours(5), lubridate::now() + lubridate::hours(5), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1) + lubridate::hours(5), lubridate::now() + lubridate::hours(5), -2, -48)
ext_rad(lubridate::now() - lubridate::hours(1) + lubridate::hours(5), lubridate::now() + lubridate::hours(5), -2, -48)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::build_readme()
devtools::install()
require(agmet)
temp <- seq(273.15, 303.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y)
temp <- seq(273.15, 323.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l')
temp <- seq(273.15, 373.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l')
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l')
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l')
xlab(expression(T ~ ('K')))
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l', xlab = expression(T ~ ('K')))
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l', xlab = expression(italic(T) ~ ('K')))
```{r include=FALSE}
install.packages('devtools')
devtools::install_github('https://github.com/jvitorpinto/agmet.git')
install.packages("devtools")
require(agmet)
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l', xlab = expression(italic(T) ~ ('K')))
temp <- seq(273.15, 473.15, by = 0.1)
y <- stefan_boltzmann_law(temp)
plot(temp, y, type = 'l', xlab = expression(italic(T) ~ ('K')), ylab = expression('Black body emittance' ~ (W ~ m^-2)))
2180e0
2.180e3
devtools::build()
devtools::install()
devtools::install()
agmet::ambaum_equation(273.15)
devtools::build()
devtools::install()
agmet::ambaum_equation(273.15)
require(agmet)
library(agmet)
remove.packages("agmet", lib="~/R/x86_64-pc-linux-gnu-library/4.2")
devtools::document()
devtools::install()
devtools::install()
devtools::document()
agmet::tetens_equation(19)
agmet::tetens_equation(10)
agmet::ambaum_equation(10)
devtools::install()
devtools::document()
devtools::install()
source("~/.active-rstudio-document")
ambaum_equation(10)
require(agmet)
require(agmet)
library(agmet)
agmet::ambaum_equation(273.15)
agmet::ambaum_equation(273.15+30)
agmet::ambaum_equation(273.15+30)/1000
agmet::ambaum_equation(273.15+30)/1000
tetens_equation(30)
library(agmet)
tetens_slope(30)
ambaum_slope(273.15+30)
ambaum_slope(273.15+30)/1000
atmospheric_pressure(0)
atmospheric_pressure(0)/1000
belem_weather
psy_const(atmospheric_pressure(0) / 1000)
library(agmet)
psy_const(atmospheric_pressure(0) / 1000)
library(agmet)
psy_const(10)
ambaum_equation(273.15 + temp)
ambaum_equation(273.15 + 30)
temp
ambaum_equation(273.15 + 30)
atmospheric_pressure(0)
atmospheric_pressure(10)
atmospheric_pressure(100)
atmospheric_pressure(1000)
atmospheric_pressure(10000)
library(agmet)
log_wind_profile(1)
devtools::document()
library(agmet)
log_wind_profile(1)
log_wind_profile(10)
log_wind_profile(2)
psy_const(101.325)
psy_const(101325)
devtools::document()
library(agmet)
